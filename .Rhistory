library(usethis)
use_package("googleLanguageR")
use_package("mscstts")
use_package("aws.polly")
use_package("aws.signature")
?v
?aws.signature::use_credentials
aws.signature::default_credentials_file
?aws.signature::default_credentials_file
?aws.signature::default_credentials_file()
aws.signature::default_credentials_file()
(normalizePath(file.path(home, ".aws", "credential23s"))
)
home <- "~"
(normalizePath(file.path(home, ".aws", "credential23s")))
list_voices()
aws.polly::list_voices()
L = aws.polly::list_voices()
length(l)
length(L)
credential_file = aws.signature::default_credentials_file()
auth = aws.signature::use_credentials(...)
auth = aws.signature::use_credentials(
)
auth
needed <- c("https://www.googleapis.com/auth/cloud-language",
"https://www.googleapis.com/auth/cloud-platform")
auth = googleAuthR::gar_attach_auto_auth(needed,
environment_var = "GL_AUTH")
auth
auth = googleAuthR::gar_attach_auto_auth(
needed,
environment_var = "GL_AUTH")
auth = googleAuthR::gar_attach_auto_auth(
needed,
environment_var = "GL_AUTH_FILE")
gar_check_existing_token()
library(googleAuthR)
gar_check_existing_token()
?gar_check_existing_token()
token_exists()
library(googleAuthR)
token_exists()
auth = googleLanguageR::gl_auth(json_file = json_file)
credential_file = aws.signature::default_credentials_file()
auth = aws.signature::use_credentials
auth = aws.signature::use_credentials()
auth
aws.polly::list_voices
googleLanguageR::gl_talk_languages()
?aws.signature::use_credentials
aws.signature::use_credentials()
res = aws.signature::use_credentials()
res
usethis::use_package("mscstts")
usethis::use_package("googleAuthR")
library(mscstts)
ms_have_tts_key()
ms_have_tts_key
ms_get_tts_key
?ms_set_tts_key()
ms_languages
ms_languages()
mscstts::ms_have_tts_key
mscstts::ms_have_tts_key()
mscstts::ms_have_tts_key
ms_get_tts_key
ms_get_tts_token()
?v
?ms_get_tts_token
res = mscstts::ms_get_tts_token(...)
res = mscstts::ms_get_tts_token
res = mscstts::ms_get_tts_token()
res$request
usethis::use_package("httr")
usethis::use_roxygen_md()
? googleLanguageR::gl_auth
?googleAuthR::gar_attach_auto_auth
library(text2speech)
tts_auth("google")
tts_auth("amazon")
tts_auth("microsoft")
?mscstts::ms_synthesize
/gl_talk
?gl_talk
library(aws.polly)
?synthesize()
?gl_talk
?aws.polly
?synthesize
?v
?mscstts::ms_synthesize
?googleLanguageR::gl_talk
?aws.polly::synthesize
?mscstts::ms_synthesize
?googleLanguageR::gl_talk
?aws.polly::synthesize
?mscstts::ms_synthesize
ms_languages()
ms_language_codes()
aws.polly::synthesize
?aws.polly::synthesize
mscstts::ms_synthesize
assertthat::is.string
library(stringi)
stri_rand_lipsum(1000)
text = stri_rand_lipsum(1000)
nc = nchar(text)
any(nc) > limit
limit = 5000
any(nc) > limit
limit = 1500
nc = nchar(text)
any(nc) > limit
text = stri_rand_lipsum(5)
text = paste(text[1:5], collapse = " ")
text
nc = nchar(text)
nc
limit
any(nc) > limit
pieces <- ceiling(nchar(text)/limit)
pieces
stopifnot(is.character(text) & length(text) == 1)
nc = nchar(text)
any(nc) > limit
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
words
indices = ceiling(seq_along(words)/(length(words)/pieces))
indices
chunks <- split(words, indices)
chunks
text = stri_rand_lipsum(5)
text = paste(text[1:5], collapse = " ")
stopifnot(is.character(text) & length(text) == 1)
nc = nchar(text)
if (any(nc) > limit) {
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(), ...)
}
text
length(tex)
length(tex)t
length(text)
limit
any(nc) > limit
nc
tts_audio_read = function(output_format) {
func = switch(
output_format,
wav = tuneR::readWave,
mp3 = tuneR::readMP3,
)
}
text = stri_rand_lipsum(5)
text = paste(text[1:5], collapse = " ")
limit
stopifnot(is.character(text) & length(text) == 1)
nc = nchar(text)
nc
any(nc) > limit
nc
if (any(nc > limit)) {
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(), ...)
}
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character())
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(0))
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(1))
text
tts_audio_read = function(output_format) {
func = switch(
output_format,
wav = tuneR::readWave,
mp3 = tuneR::readMP3,
)
}
text = stri_rand_lipsum(5)
text = paste(text[1:5], collapse = " ")
stopifnot(is.character(text) & length(text) == 1)
nc = nchar(text)
if (any(nc > limit)) {
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(1))
}
text
mscstts::ms_synthesize
paste0(sample(letters, size = 1000, replace = TRUE), collapse = "")
ms_synthesize(paste0(sample(letters, size = 1000, replace = TRUE), collapse = ""))
ms_synthesize(paste0(sample(letters, size = 800, replace = TRUE), collapse = ""))
ms_synthesize(paste0(sample(letters, size = 900, replace = TRUE), collapse = ""))
ms_synthesize(paste0(sample(letters, size = 850, replace = TRUE), collapse = ""))
ms_synthesize(paste0(sample(letters, size = 875, replace = TRUE), collapse = ""))
purrr:bind
purrr::bind
?bind
aws.polly::get_synthesis
aws.polly::synthesize
ws.polly::get_synthesis
aws.polly::get_synthesis
googleLanguageR::gl_talk
tts_amazon
mscstts::ms_synthesize
output_format
googleLanguageR::gl_talk
tts_audio_read
text = stri_rand_lipsum(5)
text = stringi::stri_rand_lipsum(5)
limit = 5000
text = stringi::stri_rand_lipsum(5)
output_format = c("mp3")
limit = 5000
output_format = match.arg(output_format)
audio_type = output_format
output_format = switch(
output_format,
"mp3" = "MP3",
"wav" = "LINEAR16")
output_format
text
text = string[1]
string = text[1]
text = tts_split_text(string, limit = limit)
tts_audio_read = function(
file,
output_format = c("mp3", "wav") ) {
output_format = match.arg(output_format)
out = switch(
output_format,
wav = tuneR::readWave(file),
mp3 = tuneR::readMP3(file),
)
return(out)
}
tts_temp_audio = function(output_format = c("mp3", "wav") ) {
output_format = match.arg(output_format)
ext = paste0(".", output_format)
tempfile(fileext = ext)
}
tts_split_text = function(text, limit = 5000) {
stopifnot(is.character(text) & length(text) == 1)
nc = nchar(text)
if (any(nc > limit)) {
pieces <- ceiling(nchar(text)/limit)
words <- strsplit(text, " ")[[1]]
indices = ceiling(seq_along(words)/(length(words)/pieces))
chunks <- split(words, indices)
text = vapply(chunks, paste, collapse = " ",
FUN.VALUE = character(1))
}
return(text)
}
text = tts_split_text(string, limit = limit)
text
text = stringi::stri_rand_lipsum(5)
output_format = c("mp3")
string = text[1]
limit = 5000
output_format = match.arg(output_format)
audio_type = output_format
output_format = switch(
output_format,
"mp3" = "MP3",
"wav" = "LINEAR16")
strings = tts_split_text(string, limit = limit)
res = lapply(strings, function(tt) {
output = tts_temp_audio(audio_type)
out = googleLanguageR::gl_talk(
tt,
output = output,
audioEncoding = output_format
)})
source('~/Dropbox/Packages/text2speech/R/tts_backend.R')
library(text2speech)
devtools::load_all(".")
tts_google_auth()
text = stringi::stri_rand_lipsum(5)
output_format = c("mp3")
string = text[1]
limit = 5000
output_format = match.arg(output_format)
audio_type = output_format
output_format = switch(
output_format,
"mp3" = "MP3",
"wav" = "LINEAR16")
strings = tts_split_text(string, limit = limit)
strings
res = lapply(strings, function(tt) {
output = tts_temp_audio(audio_type)
out = googleLanguageR::gl_talk(
tt,
output = output,
audioEncoding = output_format,
...)
})
res = lapply(strings, function(tt) {
output = tts_temp_audio(audio_type)
out = googleLanguageR::gl_talk(
tt,
output = output,
audioEncoding = output_format
)})
res
out = lapply(res, tts_audio_read,
output_format = audio_type)
out = tuneR::bind(out)
out
out = do.call(tuneR::bind, out)
out
library(text2speech)
